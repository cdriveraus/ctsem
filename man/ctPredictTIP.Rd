% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctKalman.R
\name{ctPredictTIP}
\alias{ctPredictTIP}
\title{ctPredictTIP}
\usage{
ctPredictTIP(
  sf,
  tipreds = "all",
  subject = 1,
  timestep = "auto",
  plot = TRUE,
  quantiles = c(0.32, 0.5, 0.68),
  baselineQuantile = 0.5,
  showUncertainty = TRUE,
  ...
)
}
\arguments{
\item{sf}{A fitted ctStanFit object from the ctsem package.}

\item{tipreds}{A character vector specifying which time independent predictors to use. Default is 'all', which uses all time independent predictors in the model.}

\item{subject}{An integer value specifying the internal ctsem subject ID (mapping visible under myfit$setup$idmap) for which predictions are made. 
This is relevant only when time dependent predictors are also included in the model.}

\item{timestep}{A numeric value specifying the time step for predictions. Default is 'auto', which tries to automatically determine an appropriate time step.}

\item{plot}{A logical value indicating whether to ggplot the results instead of returning a data.frame of predictions. Default is TRUE.}

\item{quantiles}{A numeric vector specifying the quantiles of the time independent predictors to plot. Default is 1SD either side and the median, c(.32,.5,.68).}

\item{showUncertainty}{A logical value indicating whether to plot the uncertainty of the predictions. Default is TRUE.}
}
\value{
If plot is TRUE, a list of ggplot objects showing the estimated effects of covariate moderators. Otherwise, a data frame with the predictions.
}
\description{
Outputs the estimated effect of time independent predictors (covariate moderators) on the expected observations.
}
\details{
This function estimates the effects of covariate moderators on the expected process 
and observations for a specified subject in a dynamic system. The covariate moderators are defined at the specified quantiles, 
and their effects on the trajectory are plotted or returned as a data frame.
}
\examples{
# Example usage:
ctPredictTIP(ctstantestfit, tipreds='all', plot=TRUE)

# To return the predictions instead of the plot
tipPredictions <- ctPredictTIP(ctstantestfit, tipreds='all', plot=FALSE)

# Plot the output predictions
ggplot(data = tipPredictions,mapping = aes(y=Value,x=Time,linetype=Direction,colour=Covariate))+
  geom_line(size=1)+
  scale_colour_manual(values=c(1,2:length(unique(kdat$Covariate))),
  labels=c('No covariate',levels(kdat$Covariate)[-1]))+
  facet_wrap(vars(Variable),scales = 'free_y')+theme_bw()+
  theme(legend.position = 'bottom')

}
